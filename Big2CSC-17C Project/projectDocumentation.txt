# Big2 Card Game Project Documentation

## Introduction
The Big2 card game project is an implementation of the popular Asian card game Big2 (also known as Big Two or Deuces) in C++. This game was chosen for its strategic depth, interesting gameplay mechanics, and the opportunity to implement complex card game logic. The project demonstrates advanced C++ programming concepts and object-oriented design principles.

## Project Statistics
- **Lines of Code**: Approximately 1,700 lines
- **Classes**: 4 main classes
  - Card (92 lines)
  - Deck (251 lines)
  - Player (517 lines)
  - PlayingHand (688 lines)
- **Development Time**: [To be filled by developer]
- **GitHub Repository**: [To be filled by developer]

## Approach to Development
The project was developed using a structured approach:
1. Core game mechanics implementation
2. Player interaction system
3. AI player implementation
4. Game flow and rules enforcement
5. Testing and refinement

## Concepts
- Object-Oriented Programming
- Card Game Logic
- AI Decision Making
- Game State Management
- User Interface Design
- Memory Management
- Data Structures (Vectors, Stacks, Queues)

## Version Control
The project uses Git for version control with the following structure:
- `main.cpp`: Core game logic and main loop
- `Card.h`: Card class definition
- `Deck.h`: Deck management
- `Player.h`: Player and AI logic
- `PlayingHand.h`: Hand evaluation and comparison

## Game Rules
Big2 is a shedding-type card game with the following rules:
1. Four players start with 13 cards each
2. The player with the 3 of clubs starts the game
3. Players must play higher combinations than the previous player
4. Valid combinations include:
   - Single cards
   - Pairs
   - Three of a kind
   - Five-card combinations (straight, flush, full house, etc.)
5. Game ends when a player runs out of cards
6. Three consecutive passes start a new round

## Description of Code

### Organization
The code is organized into four main classes with clear separation of concerns:

1. **Card Class**
   - Represents individual playing cards
   - Handles card properties (value and suit)
   - Provides comparison operations

2. **Deck Class**
   - Manages the deck of cards
   - Handles shuffling and dealing
   - Maintains card collection

3. **Player Class**
   - Manages player hands
   - Implements AI decision-making
   - Handles player actions

4. **PlayingHand Class**
   - Evaluates hand combinations
   - Compares hands for validity
   - Manages hand state

### Classes

#### Card Class
```cpp
class Card {
    int card;    // Card value (1-13)
    int suit;    // Suit value (1-4)
    
    // Methods for card operations
    int getCard();
    int getSuit();
    bool operator<(const Card& other);
    // ... other methods
};
```

#### Deck Class
```cpp
class Deck {
    deque<Card> Cards;
    
    // Methods for deck management
    void shuffleDeck();
    Card takeTopFromDeck();
    deque<Card> getCards();
    // ... other methods
};
```

#### Player Class
```cpp
class Player {
    Deck playerDeck;
    bool isAI;
    
    // Methods for player actions
    PlayingHand decision(PlayingHand currentHand);
    void addToPlayerHand(Card card);
    int getAmountOfCards();
    // ... other methods
};
```

#### PlayingHand Class
```cpp
class PlayingHand {
    list<Card> Cards;
    
    // Methods for hand evaluation
    bool isValid();
    bool canBeat(PlayingHand other);
    list<Card> getCards();
    // ... other methods
};
```

## Sample Input/Output
```
=== Card Counts ===
Player 1: 13 cards
Player 2: 13 cards
Player 3: 13 cards
Player 4: 13 cards
=================

=== Player 1's Turn ===
[Player plays hand]
=== Card Counts ===
Player 1: 12 cards
Player 2: 13 cards
Player 3: 13 cards
Player 4: 13 cards
=================
```

## Checkoff Sheet
- [x] Code compiles without errors
- [x] All game rules implemented correctly
- [x] AI players make reasonable decisions
- [x] User interface is clear and functional
- [x] Documentation is complete
- [x] Version control is properly maintained
- [x] Code follows style guidelines
- [x] All classes are properly documented
- [x] Game flow is smooth and bug-free
- [x] Error handling is implemented

## STL Components Checkoff Sheet

### 1. Container Classes

#### 1.1 Sequences
- [x] deque (Used in Deck class for card storage)
  - Location: `Deck.h`
  - Usage: Storing and managing collections of cards with efficient front/back operations
  - Implementation: `deque<Card> Cards;`

- [x] list (Used in PlayingHand and Player classes)
  - Location: `PlayingHand.h` and `Player.h`
  - Usage: 
    - Storing cards in playing hands
    - Managing card selections in player input
    - Handling card combinations in AI logic
  - Implementation: 
    ```cpp
    list<Card> Cards;  // In PlayingHand
    list<int> handSelection();  // In Player
    ```

#### 1.2 Associative Containers
- [x] map (Used throughout the project for card references)
  - Location: `Card.h`, `Deck.h`, `Player.h`, `PlayingHand.h`
  - Usage: 
    - Mapping card values to their string representations
    - Storing hand type descriptions
    - Card rank and suit references
  - Implementation: 
    ```cpp
    map<int, string> cardRankRef;
    map<int, char> cardSuitesRef;
    map<int, string> handType;
    ```

- [x] set (Used in Player class for input validation)
  - Location: `Player.h`
  - Usage: Ensuring unique card selections
  - Implementation: `set<int> cleanedInput(selectedIndices.begin(), selectedIndices.end());`

- [x] unordered_map (Used in PlayingHand class for card counting)
  - Location: `PlayingHand.h`
  - Usage: Counting card ranks and suits in a hand
  - Implementation: 
    ```cpp
    unordered_map<int,int> CardRankAmount;
    unordered_map<int,int> CardSuitAmount;
    ```

#### 1.3 Container Adaptors
- [x] stack (Used in main game loop for hand history)
  - Location: `main.cpp`
  - Usage: Tracking previous hands played
  - Implementation: `stack<PlayingHand> handHistory;`

- [x] queue (Used in main game loop for turn management)
  - Location: `main.cpp`
  - Usage: Managing player turn order
  - Implementation: `queue<Player*> turnOrder;`

### 2. Iterators

#### 2.1 Iterator Concepts Used
- [x] Forward Iterator
  - Used with list in PlayingHand and Player classes
  - Implementation: `list<Card>::iterator` and `list<int>::iterator`

- [x] Bidirectional Iterator
  - Used with map for card rank and suit lookups
  - Implementation: `map<int, string>::iterator`

- [x] Random Access Iterator
  - Used with deque in Deck class
  - Implementation: `deque<Card>::iterator`

### 3. Algorithms

#### 3.1 Non-mutating Algorithms
- [x] find
  - Location: `Player.h` and `PlayingHand.h`
  - Usage: 
    - Finding specific cards in hand evaluation
    - Checking card selections in player input
  - Implementation: 
    ```cpp
    find(Cards.begin(), Cards.end(), targetCard)
    find(selectedIndices.begin(), selectedIndices.end(), i)
    ```

- [x] count
  - Location: `PlayingHand.h`
  - Usage: Counting card occurrences in hand evaluation
  - Implementation: `count(Cards.begin(), Cards.end(), targetCard)`

#### 3.2 Mutating Algorithms
- [x] shuffle
  - Location: `Deck.h`
  - Usage: Shuffling the deck with time-based seed
  - Implementation: 
    ```cpp
    shuffle(Cards.begin(), Cards.end(), g)
    // where g is a Mersenne Twister random number generator
    ```

- [x] sort
  - Location: `Deck.h` and `PlayingHand.h`
  - Usage: 
    - Sorting cards in deck by suit and rank
    - Sorting cards in hand for evaluation
  - Implementation: 
    ```cpp
    sort(Cards.begin(), Cards.end(), [](const Card& a, const Card& b) {...})
    ```

#### 3.3 Organization Algorithms
- [x] sort
  - Location: `PlayingHand.h`
  - Usage: Sorting cards in hand for evaluation
  - Implementation: `sort(Cards.begin(), Cards.end())`

- [x] max_element
  - Location: `PlayingHand.h`
  - Usage: Finding highest card in hand
  - Implementation: 
    ```cpp
    max_element(Cards.begin(), Cards.end(), 
        [](const Card& a, const Card& b) { return a.getCard() < b.getCard(); })
    ```

## Documentation of Code

### Flowchart
```
[Start]
   ↓
Initialize Game
   ↓
Deal Cards
   ↓
Find Player with 3 of Clubs
   ↓
While Game Not Over:
   ↓
   Get Current Player
   ↓
   Show Current Hand to Beat
   ↓
   Get Player's Decision
   ↓
   Update Game State
   ↓
   Check for Game Over
   ↓
[End]
```

### Pseudo-Code
```
Main Game Loop:
1. Initialize game
2. Deal cards to players
3. Find player with 3 of clubs
4. While game not over:
   a. Get current player
   b. Show current hand to beat
   c. Get player's decision
   d. Update game state
   e. Check for game over
5. Display winner
```

### UML Class Diagram
```
[Card]
  |
  |-- value: int
  |-- suit: int
  |-- getCard(): int
  |-- getSuit(): int

[Deck]
  |
  |-- Cards: deque<Card>
  |-- shuffleDeck(): void
  |-- takeTopFromDeck(): Card

[Player]
  |
  |-- playerDeck: Deck
  |-- isAI: bool
  |-- decision(PlayingHand): PlayingHand
  |-- addToPlayerHand(Card): void

[PlayingHand]
  |
  |-- Cards: list<Card>
  |-- isValid(): bool
  |-- canBeat(PlayingHand): bool
```

## Version History
1.0.0 - Initial project setup
- Created basic class structure
- Implemented core game mechanics
- Added AI player functionality

[To be updated with future changes] 